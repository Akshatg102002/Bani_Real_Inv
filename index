<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Warehouse Inventory Tracker</title>
     <link rel="icon" type="image/png"
        href="//baniwomen.com/cdn/shop/files/baniwomen-icon.png?crop=center&height=32&v=1706881484&width=32">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        body {
            background-color: #f0f2f5;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        .container-fluid {
            padding: 2rem;
        }
        .card, .form-control, .btn, .input-group-text, .list-group-item, .form-select {
            border-radius: 0 !important;
        }
        .card {
            border: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .card-header {
            background-color: #343a40;
            color: #fff;
            font-weight: 600;
            border-bottom: 0;
        }
        .table-responsive {
            max-height: 60vh;
        }
        .sticky-header {
            position: sticky;
            top: 0;
            z-index: 2;
            background: #f8f9fa;
            box-shadow: inset 0 -2px 0 #dee2e6;
        }
        .total-row td {
            font-weight: bold;
            background-color: #e9ecef;
        }
         .notification-dot {
            height: 10px;
            width: 10px;
            background-color: #dc3545;
            border-radius: 50%;
            display: inline-block;
            position: absolute;
            top: 10px;
            right: 10px;
            border: 2px solid #343a40;
            display: none; /* Hidden by default */
        }
        .notification-bell {
            position: relative;
            cursor: pointer;
        }
        .header-title {
            font-weight: 300;
            font-size: 2.5rem;
        }
        .btn-primary {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .form-label {
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <header class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="header-title">Bani Inventory Dashboard</h1>
            <div class="notification-bell">
                <i class="bi bi-bell-fill fs-4 text-secondary"></i>
                <span class="notification-dot"></span>
            </div>
        </header>

        <!-- File Management and Watchlist -->
        <div class="row mb-4">
            <div class="col-lg-5 mb-4 mb-lg-0 upload-section">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Manage Reports</h5>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <p>Upload your latest inventory reports.</p>
                        <div class="mb-3">
                            <label for="sjitInvFile" class="form-label">SJIT Inventory Report</label>
                            <div class="input-group">
                                <input type="file" class="form-control" id="sjitInvFile" accept=".csv, .xls, .xlsx">
                                <button class="btn btn-outline-secondary" type="button" onclick="deleteFile('sjitInvFile', 'sjitInvFileName')"><i class="bi bi-trash"></i></button>
                            </div>
                             <small id="sjitInvFileName" class="d-block mt-1 text-muted"></small>
                        </div>
                        <div class="mb-3">
                            <label for="delhiInvFile" class="form-label">Delhi Warehouse Report (BIN)</label>
                            <div class="input-group">
                                <input type="file" class="form-control" id="delhiInvFile" accept=".csv, .xls, .xlsx">
                                 <button class="btn btn-outline-secondary" type="button" onclick="deleteFile('delhiInvFile', 'delhiInvFileName')"><i class="bi bi-trash"></i></button>
                            </div>
                            <small id="delhiInvFileName" class="d-block mt-1 text-muted"></small>
                        </div>
                         <button class="btn btn-primary mt-auto" onclick="processFiles()">Process Inventory</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-7 watchlist-section">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Top SKUs Watchlist</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-2 mb-3">
                            <div class="col-sm-5">
                                <input type="text" id="watchlistSkuInput" class="form-control" placeholder="Enter Local SKU">
                            </div>
                             <div class="col-sm-3">
                                <select class="form-select" id="watchlistType">
                                    <option value="total" selected>Total Stock</option>
                                    <option value="sjit">SJIT Stock</option>
                                    <option value="delhi">Delhi Stock</option>
                                </select>
                            </div>
                            <div class="col-sm-2">
                                <input type="number" id="watchlistLimitInput" class="form-control" placeholder="Limit">
                            </div>
                            <div class="col-sm-2">
                                <button class="btn btn-success w-100" type="button" onclick="addToWatchlist()">Add</button>
                            </div>
                        </div>
                        <ul id="watchlist" class="list-group">
                           <!-- Watchlist items will be added here -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Inventory Display -->
        <div class="card">
            <div class="card-header">
                 <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5 class="card-title mb-0">Consolidated Inventory</h5>
                    </div>
                    <div class="col-md-6">
                         <input type="text" id="searchInput" class="form-control bg-light" placeholder="Search by any SKU...">
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="sticky-header">
                            <tr>
                                <th>Local SKU</th>
                                <th>Style ID</th>
                                <th>Total Stock</th>
                                <th>SJIT Overall</th>
                                <th>SJIT Mumbai</th>
                                <th>SJIT Binola</th>
                                <th>SJIT Bangalore</th>
                                <th>Delhi Warehouse</th>
                            </tr>
                        </thead>
                        <tbody id="inventoryTableBody">
                           <!-- Inventory data will be loaded here -->
                        </tbody>
                        <tfoot id="inventoryTableFooter">
                            <!-- Totals will be loaded here -->
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div id="appToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <strong class="me-auto" id="toastTitle"></strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody">
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>
        // Global data stores
        let masterSkuMap = new Map();
        let inventoryData = new Map();
        let watchlist = new Map();

        // --- UI & NOTIFICATIONS ---
        function showToast(title, body, type = 'success') {
            const toastEl = document.getElementById('appToast');
            const toastTitleEl = document.getElementById('toastTitle');
            const toastBodyEl = document.getElementById('toastBody');
            const toastHeader = toastEl.querySelector('.toast-header');

            toastTitleEl.textContent = title;
            toastBodyEl.innerHTML = body;

            toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info', 'text-white');
            if (type === 'success') {
                toastHeader.classList.add('bg-success', 'text-white');
            } else if (type === 'danger') {
                toastHeader.classList.add('bg-danger', 'text-white');
            } else if (type === 'info') {
                 toastHeader.classList.add('bg-info', 'text-white');
            }
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }

        // --- FILE HANDLING ---
        document.getElementById('sjitInvFile').addEventListener('change', (e) => handleFileSelect(e, 'sjitInvFileName'));
        document.getElementById('delhiInvFile').addEventListener('change', (e) => handleFileSelect(e, 'delhiInvFileName'));
        document.getElementById('searchInput').addEventListener('keyup', renderInventoryTable);


        function handleFileSelect(event, labelId) {
            const file = event.target.files[0];
            if (file) {
                document.getElementById(labelId).textContent = `Selected: ${file.name}`;
            }
        }

        function deleteFile(inputId, labelId) {
            document.getElementById(inputId).value = '';
            document.getElementById(labelId).textContent = '';
        }
        
        function parseFile(file) {
            return new Promise((resolve, reject) => {
                const fileName = file.name.toLowerCase();
                if (fileName.endsWith('.csv')) {
                    Papa.parse(file, {
                        header: true,
                        skipEmptyLines: true,
                        complete: (results) => resolve(results.data),
                        error: (error) => reject(error),
                    });
                } else if (fileName.endsWith('.xls') || fileName.endsWith('.xlsx')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        try {
                            const data = new Uint8Array(e.target.result);
                            const workbook = XLSX.read(data, { type: 'array' });
                            const firstSheetName = workbook.SheetNames[0];
                            const worksheet = workbook.Sheets[firstSheetName];
                            const json = XLSX.utils.sheet_to_json(worksheet);
                            resolve(json);
                        } catch (err) {
                            reject(err);
                        }
                    };
                    reader.onerror = (error) => reject(error);
                    reader.readAsArrayBuffer(file);
                } else {
                    reject(new Error('Unsupported file type. Please upload CSV or Excel files.'));
                }
            });
        }

        async function loadMasterSkuFile() {
            try {
                const response = await fetch('AK.csv');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const csvText = await response.text();
                const masterData = Papa.parse(csvText, {
                    header: true,
                    skipEmptyLines: true,
                }).data;

                masterSkuMap.clear();
                masterData.forEach(row => {
                    const localSku = row.Local_SKU;
                    if (localSku) {
                        masterSkuMap.set(localSku, { myntra: row.Myntra_SKU, nykaa: row.Nykaa_SKU, ajio: row.AJIO_SKU });
                        if (row.Myntra_SKU) masterSkuMap.set(row.Myntra_SKU, { local: localSku });
                        if (row.SKU_ID) masterSkuMap.set(row.SKU_ID, { local: localSku });
                        if (row.Nykaa_SKU) masterSkuMap.set(row.Nykaa_SKU, { local: localSku });
                    }
                });
            } catch (error) {
                console.error("Could not load Master SKU Mapping file:", error);
                showToast("Error", "Could not load 'Master_SKU_Mapping.csv'. Please ensure it's in the same folder as this HTML file.", 'danger');
            }
        }

        async function processFiles() {
            if (masterSkuMap.size === 0) {
                showToast('Error', 'Master SKU file is not loaded. Ensure "Master_SKU_Mapping.csv" is in the same folder and refresh.', 'danger');
                return;
            }

            const sjitFile = document.getElementById('sjitInvFile').files[0];
            const delhiFile = document.getElementById('delhiInvFile').files[0];
            
            if (!sjitFile && !delhiFile) {
                showToast('Error', 'Please upload at least one inventory report.', 'danger');
                return;
            }

            inventoryData.clear();
            
            try {
                if (sjitFile) {
                    const sjitData = await parseFile(sjitFile);
                    sjitData.forEach(row => {
                        const sku = row['seller sku code'] || row['sku id'];
                        const styleId = row['style id'];
                        const warehouse = row['warehouse name']?.toLowerCase();
                        const stock = parseInt(row['inventory count'], 10) || 0;
                        
                        const mapping = masterSkuMap.get(sku);
                        if (mapping?.local && stock > 0) {
                            const localSku = mapping.local;
                            if (!inventoryData.has(localSku)) {
                                inventoryData.set(localSku, createEmptyInventoryRecord());
                            }
                            const record = inventoryData.get(localSku);
                            record.styleId = styleId || record.styleId;
                            record.sjit.total += stock;

                            if (warehouse.includes('mumbai')) record.sjit.mumbai += stock;
                            else if (warehouse.includes('binola')) record.sjit.binola += stock;
                            else if (warehouse.includes('bangalore')) record.sjit.bangalore += stock;
                        }
                    });
                }
                
                if (delhiFile) {
                    const delhiData = await parseFile(delhiFile);
                    delhiData.forEach(row => {
                        const sku = row['internal code'];
                        const stock = parseInt(row['Total Stock'], 10) || 0;
                        const localSku = sku;
                        
                        if (inventoryData.has(localSku)) {
                            const record = inventoryData.get(localSku);
                            record.delhi += stock;
                        } else if (masterSkuMap.has(localSku) && stock > 0) {
                             inventoryData.set(localSku, {
                                ...createEmptyInventoryRecord(),
                                delhi: stock
                            });
                        }
                    });
                }
                
                calculateTotals();
                renderInventoryTable();
                updateWatchlistDisplay();
                localStorage.setItem('inventoryData', JSON.stringify(Array.from(inventoryData.entries())));
                showToast('Success', '<i class="bi bi-check-circle-fill"></i> Inventory data loaded and processed successfully!', 'success');

            } catch (error) {
                console.error("Error processing files:", error);
                showToast('Error', `An error occurred while processing the files: ${error.message}`, 'danger');
            }
        }

        function createEmptyInventoryRecord() {
            return {
                styleId: 'N/A',
                sjit: { total: 0, mumbai: 0, binola: 0, bangalore: 0 },
                delhi: 0,
                total: 0
            };
        }

        function calculateTotals() {
            for (let [sku, data] of inventoryData.entries()) {
                data.total = data.sjit.total + data.delhi;
            }
        }

        // --- RENDERING ---
        function renderInventoryTable() {
            const tableBody = document.getElementById('inventoryTableBody');
            const tableFooter = document.getElementById('inventoryTableFooter');
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            tableBody.innerHTML = '';
            tableFooter.innerHTML = '';

            const totals = { total: 0, sjit: 0, mumbai: 0, binola: 0, bangalore: 0, delhi: 0 };
            const sortedData = new Map([...inventoryData.entries()].sort());

            for (let [localSku, data] of sortedData) {
                const platformSkus = masterSkuMap.get(localSku) || {};
                const myntraSku = platformSkus.myntra || '';
                const nykaaSku = platformSkus.nykaa || '';

                if (!localSku.toLowerCase().includes(searchTerm) && 
                    !myntraSku.toLowerCase().includes(searchTerm) &&
                    !nykaaSku.toLowerCase().includes(searchTerm)) {
                    continue;
                }

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${localSku}</td>
                    <td>${data.styleId}</td>
                    <td>${data.total}</td>
                    <td>${data.sjit.total}</td>
                    <td>${data.sjit.mumbai}</td>
                    <td>${data.sjit.binola}</td>
                    <td>${data.sjit.bangalore}</td>
                    <td>${data.delhi}</td>
                `;
                tableBody.appendChild(row);

                totals.total += data.total;
                totals.sjit += data.sjit.total;
                totals.mumbai += data.sjit.mumbai;
                totals.binola += data.sjit.binola;
                totals.bangalore += data.sjit.bangalore;
                totals.delhi += data.delhi;
            }
            
            const footerRow = document.createElement('tr');
            footerRow.className = 'total-row';
            footerRow.innerHTML = `
                <td colspan="2">Grand Total</td>
                <td>${totals.total}</td>
                <td>${totals.sjit}</td>
                <td>${totals.mumbai}</td>
                <td>${totals.binola}</td>
                <td>${totals.bangalore}</td>
                <td>${totals.delhi}</td>
            `;
            tableFooter.appendChild(footerRow);
        }

        // --- WATCHLIST & NOTIFICATIONS ---
        function addToWatchlist() {
            const skuInput = document.getElementById('watchlistSkuInput');
            const limitInput = document.getElementById('watchlistLimitInput');
            const typeSelect = document.getElementById('watchlistType');
            
            const sku = skuInput.value.trim();
            const limit = parseInt(limitInput.value, 10);
            const type = typeSelect.value;

            if (!sku || isNaN(limit) || limit < 0) {
                showToast('Warning', 'Please enter a valid SKU and a non-negative limit.', 'danger');
                return;
            }

            if (!inventoryData.has(sku)) {
                 showToast('Warning', 'This SKU does not exist in the processed inventory data.', 'danger');
                 return;
            }
            
            watchlist.set(sku, { limit, type });
            skuInput.value = '';
            limitInput.value = '';
            updateWatchlistDisplay();
            localStorage.setItem('watchlist', JSON.stringify(Array.from(watchlist.entries())));
        }

        function removeFromWatchlist(sku) {
            watchlist.delete(sku);
            updateWatchlistDisplay();
            localStorage.setItem('watchlist', JSON.stringify(Array.from(watchlist.entries())));
        }

        function updateWatchlistDisplay() {
            const listElement = document.getElementById('watchlist');
            listElement.innerHTML = '';
            let lowStockAlert = false;

            if (watchlist.size === 0) {
                 listElement.innerHTML = '<li class="list-group-item text-muted">No SKUs are being watched.</li>';
                 return;
            }

            for(let [sku, settings] of watchlist.entries()) {
                const data = inventoryData.get(sku) || createEmptyInventoryRecord();
                let isBelowLimit = false;
                let stockToCheck;

                switch(settings.type) {
                    case 'sjit':
                        stockToCheck = data.sjit.total;
                        break;
                    case 'delhi':
                        stockToCheck = data.delhi;
                        break;
                    case 'total':
                    default:
                        stockToCheck = data.total;
                        break;
                }
                
                isBelowLimit = stockToCheck < settings.limit;
                
                const listItem = document.createElement('li');
                listItem.className = `list-group-item d-flex justify-content-between align-items-center ${isBelowLimit ? 'list-group-item-danger' : ''}`;
                
                const typeText = settings.type.charAt(0).toUpperCase() + settings.type.slice(1);

                listItem.innerHTML = `
                    <div>
                        <strong>${sku}</strong> 
                        <span class="badge bg-secondary">${typeText} Limit: ${settings.limit}</span>
                        <div class="small text-muted mt-1">
                            SJIT Stock: <strong>${data.sjit.total}</strong> | Delhi Stock: <strong>${data.delhi}</strong>
                        </div>
                    </div>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeFromWatchlist('${sku}')"><i class="bi bi-x-lg"></i></button>
                `;
                listElement.appendChild(listItem);

                if(isBelowLimit) {
                    lowStockAlert = true;
                }
            }
            
            const dot = document.querySelector('.notification-dot');
            dot.style.display = lowStockAlert ? 'inline-block' : 'none';

            if (lowStockAlert && Notification.permission === 'granted') {
                const lowStockSkus = [...watchlist.entries()].filter(([sku, settings]) => {
                     const data = inventoryData.get(sku) || createEmptyInventoryRecord();
                     let stockToCheck;
                      switch(settings.type) {
                        case 'sjit': stockToCheck = data.sjit.total; break;
                        case 'delhi': stockToCheck = data.delhi; break;
                        default: stockToCheck = data.total; break;
                    }
                    return stockToCheck < settings.limit;
                });
                const skuList = lowStockSkus.map(([sku, settings]) => `${sku} (${settings.type} stock is low)`).join(', ');
                new Notification('Low Stock Alert!', {
                    body: `Attention needed for: ${skuList}`,
                    icon: 'https://cdn-icons-png.flaticon.com/512/1533/1533630.png'
                });
            }
        }
        
        function loadFromLocalStorage() {
            const savedInventory = localStorage.getItem('inventoryData');
            const savedWatchlist = localStorage.getItem('watchlist');

            if (savedInventory) {
                try {
                    inventoryData = new Map(JSON.parse(savedInventory));
                    if (inventoryData.size > 0) {
                        renderInventoryTable();
                        showToast('Info', 'Loaded saved data from your last session.', 'info');
                    }
                } catch(e) {
                    console.error("Failed to parse inventory data from localStorage", e);
                    localStorage.removeItem('inventoryData');
                }
            }

            if (savedWatchlist) {
                try {
                    watchlist = new Map(JSON.parse(savedWatchlist));
                     if (watchlist.size > 0) {
                        updateWatchlistDisplay();
                    }
                } catch(e) {
                    console.error("Failed to parse watchlist data from localStorage", e);
                    localStorage.removeItem('watchlist');
                }

            }
        }
        
        window.addEventListener('load', () => {
            loadMasterSkuFile(); 
            loadFromLocalStorage();
            if ('Notification' in window) {
                Notification.requestPermission();
            }
        });

    </script>
</body>
</html>

